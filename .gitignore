//Libraries for LoRa
#include <SPI.h>
#include <LoRa.h>

//Libraries for OLED Display
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


//define the pins used by the LoRa transceiver module
#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 14
#define DIO0 26

//433E6 for Asia
//866E6 for Europe
//915E6 for North America
#define BAND 866E6

//OLED pins
#define OLED_SDA 4
#define OLED_SCL 15 
#define OLED_RST 16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define  MQ_analog 12
//packet counter


#include "DHT.h"
#define DHTPIN 13     
#define DHTTYPE DHT11   
 
DHT dht(DHTPIN, DHTTYPE);
int hum;
float temp; //Stores temperature value
 



  int counter = 0;


  Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);

  void setup() {
  //initialize Serial Monitor
  Serial.begin(115200);
  dht.begin();
  //reset OLED display via software
  pinMode(OLED_RST, OUTPUT);
  digitalWrite(OLED_RST, LOW);
  delay(20);
  digitalWrite(OLED_RST, HIGH);

  //initialize OLED
  Wire.begin(OLED_SDA, OLED_SCL);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32
  Serial.println(F("SSD1306 allocation failed"));
  for(;;); // Don't proceed, loop forever
  
  while (!Serial);
  Serial.println("LoRa Sender");
 
  if (!LoRa.begin(433E6)) {
  Serial.println("Starting LoRa failed!");
  while (1);
  }
  
  }
  
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("LORA SENDER ");
  display.display();
  
  Serial.println("LoRa Sender Test");

  //SPI LoRa pins
  SPI.begin(SCK, MISO, MOSI, SS);
  //setup LoRa transceiver module
  LoRa.setPins(SS, RST, DIO0);
  
  if (!LoRa.begin(BAND)) {
  Serial.println("Starting LoRa failed!");
  while (1);
  }
  Serial.println("LoRa Initializing OK!");
  display.setCursor(0,10);
  display.print("LoRa Initializing OK!");
  display.display();
  delay(2000);
}

void loop() {
  unsigned int sensor=analogRead(MQ_analog);
  temp = dht.readTemperature();
  hum = dht.readHumidity();
  LoRa.beginPacket();
  LoRa.print("Hum: ");
  LoRa.print(hum);
  LoRa.print("%");
  LoRa.print(" Temp:");
  LoRa.print(temp);
  LoRa.print(" C");
  
  Serial.print("Humidity: ");
  Serial.print(hum);
  Serial.print("%");
  Serial.print(" Temperature:");
  Serial.print(temp);
  Serial.println("C");
  Serial.println(""); 
 
if(temp>=60)

{
   digitalWrite(D3,HIGH)

}
else
{
  digitalWrite(D3,LOW);
}
   
  Serial.print("Sending packet: ");
  Serial.println(sensor);

  //Send LoRa packet to receiver
  
  LoRa.print("Air quality ");
  LoRa.print(sensor);
  LoRa.print("       counter: ");
  LoRa.print(counter);
  
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("LORA SENDER");
  display.setCursor(0,10);
  display.setTextSize(1);
  display.print("LoRa packet sent.");
  display.setCursor(0,20);
  display.print("airquality:");
  display.setCursor(80,20);
  display.print(sensor);      

  display.setCursor(0,30);
  display.print("T:");
  display.setCursor(30,30);
  display.print(temp);      
  display.print(" C");

  display.setCursor(0,40);
  display.print("H:");
  display.setCursor(30,40);
  display.print(hum);   
  display.print("%");
  display.setCursor(0,50);
  display.print("counter:"); 
  display.print(counter);  
  display.display();
  LoRa.endPacket();
  
  delay(10000);
  counter++;
  
}
